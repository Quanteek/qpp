{
  "name": "Quantum++",
  "tagline": "A modern C++11 quantum computing library",
  "body": "## Version 1.0.0-beta2 - 13 October 2016\r\n\r\nQuantum++ is a modern C++11 general purpose quantum computing library, composed \r\nsolely of template header files. Quantum++ is written in standard C++11 and \r\nhas very low external dependencies, using only the \r\n[Eigen 3](http://eigen.tuxfamily.org) linear algebra header-only template \r\nlibrary and, if available, the [OpenMP](http://openmp.org/) multi-processing \r\nlibrary. \r\n\r\nQuantum++ is not restricted to qubit systems or specific quantum \r\ninformation processing tasks, being capable of simulating arbitrary quantum \r\nprocesses. The main design factors taken in consideration were the ease of \r\nuse, high portability, and high performance. The library's simulation\r\ncapabilities are only restricted by the amount of available physical memory. \r\nOn a typical machine (Intel i5 8Gb RAM) Quantum++ can successfully simulate \r\nthe evolution of 25 qubits in a pure state or of 12 qubits in a mixed state \r\nreasonably fast.\r\n\r\nIf you are interesting in contributing, please contact me. \r\nTo contribute, you need to have a good knowledge of C++ (preferably C++11), \r\nincluding templates and the standard library, a basic knowledge of \r\nquantum computing and linear algebra, and working experience with \r\n[Eigen 3](http://eigen.tuxfamily.org).\r\n\r\nFor additional [Eigen 3](http://eigen.tuxfamily.org) documentation \r\nsee <http://eigen.tuxfamily.org/dox/>. For a simple \r\n[Eigen 3](http://eigen.tuxfamily.org) quick ASCII reference see\r\n<http://eigen.tuxfamily.org/dox/AsciiQuickReference.txt>.\r\n\r\nCopyright (c) 2013 - 2017 Vlad Gheorghiu, vgheorgh AT gmail DOT com.\r\n\r\n---\r\nQuantum++ is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nQuantum++ is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU General Public License for more details.\r\n\r\nYou should have received a copy of the GNU General Public License\r\nalong with Quantum++.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n---\r\n## Building instructions\r\n\r\n### Configuration\r\n\r\n- Compiler: [g++](https://gcc.gnu.org/) version 4.8.2 or later \r\n(for good C++11 support)\r\n- [Eigen 3](http://eigen.tuxfamily.org) library located in `$HOME/eigen`\r\n- Quantum++ library located in `$HOME/qpp`\r\n\r\n##### Optional\r\n\r\n- [MATLAB](http://www.mathworks.com/products/matlab/) compiler \r\ninclude header files:\r\n`/Applications/MATLAB_R2016a.app/extern/include`\r\n- [MATLAB](http://www.mathworks.com/products/matlab/) compiler \r\nshared library files:\r\n`/Applications/MATLAB_R2016a.app/bin/maci64`\r\n\r\n### Building using [CMake](http://www.cmake.org/) (version 3.0.0 or later)\r\n\r\nThe current version of the repository has a `./CMakeLists.txt` configuration \r\nfile for building examples using [CMake](http://www.cmake.org/). \r\nTo build an example using [CMake](http://www.cmake.org/), \r\nI recommend an out-of-source build, i.e., from the root of the project \r\n(where `./include` is located), type\r\n\r\n    mkdir ./build\r\n    cd ./build\r\n    cmake ..\r\n    make\r\n\r\nThe commands above build the relase version (default) executable `qpp`, \r\nfrom the source file `./examples/minimal.cpp`,\r\nwithout [MATLAB](http://www.mathworks.com/products/matlab/) support (default), \r\ninside the directory `./build`. To build a different configuration, \r\ne.g. debug version with [MATLAB](http://www.mathworks.com/products/matlab/) \r\nsupport, type from the root of the project\r\n\r\n    cd ./build\r\n    rm -rf *\r\n    cmake -DCMAKE_BUILD_TYPE=Debug -DWITH_MATLAB=ON ..\r\n    make\r\n    \r\nOr, to disable [OpenMP](http://openmp.org/) support (enabled by default), type\r\n   \r\n    cd ./build\r\n    rm -rf *\r\n    cmake -DWITH_OPENMP=OFF ..\r\n    make\r\n\r\nTo change the name of the example file, the location of the\r\n[Eigen 3](http://eigen.tuxfamily.org)\r\nlibrary or the location of [MATLAB](http://www.mathworks.com/products/matlab/) \r\ninstallation, edit the `./CMakeLists.txt` file. See also `./CMakeLists.txt` \r\nfor additional options. Do not forget to clean the `./build` directory before \r\na fresh build!\r\n\r\n### Building without an automatic build system\r\n\r\n- Example file: `$HOME/qpp/examples/minimal.cpp`\r\n- Output executable: `$HOME/qpp/examples/minimal`\r\n- You must run the commands below from inside the directory \r\n`$HOME/qpp/examples` \r\n\r\n#### Release version (without [MATLAB](http://www.mathworks.com/products/matlab/) support) \r\n\r\n\tg++ -pedantic -std=c++11 -Wall -Wextra -Weffc++ -fopenmp \\\r\n         -O3 -DNDEBUG -DEIGEN_NO_DEBUG \\\r\n         -isystem $HOME/eigen -I $HOME/qpp/include \\\r\n         minimal.cpp -o minimal\r\n\r\n#### Debug version (without [MATLAB](http://www.mathworks.com/products/matlab/) support)\r\n\r\n\tg++ -pedantic -std=c++11 -Wall -Wextra -Weffc++ -fopenmp \\\r\n         -g3 -DDEBUG \\\r\n         -isystem $HOME/eigen -I $HOME/qpp/include \\\r\n          minimal.cpp -o minimal\r\n\r\n#### Release version (with [MATLAB](http://www.mathworks.com/products/matlab/) support)\r\n\r\n\tg++ -pedantic -std=c++11 -Wall -Wextra -Weffc++ -fopenmp \\\r\n         -O3 -DNDEBUG -DEIGEN_NO_DEBUG \\\r\n         -isystem $HOME/eigen -I $HOME/qpp/include \\\r\n         -I/Applications/MATLAB_R2016a.app/extern/include \\\r\n         -L/Applications/MATLAB_R2016a.app/bin/maci64 \\\r\n         -lmx -lmat minimal.cpp -o minimal\r\n\r\n#### Debug version (with [MATLAB](http://www.mathworks.com/products/matlab/) support)\r\n\r\n\tg++ -pedantic -std=c++11 -Wall -Wextra -Weffc++ -fopenmp \\\r\n         -g3 -DDEBUG \\\r\n         -isystem $HOME/eigen -I $HOME/qpp/include \\\r\n         -I /Applications/MATLAB_R2016a.app/extern/include \\\r\n         -L /Applications/MATLAB_R2016a.app/bin/maci64 \\\r\n         -lmx -lmat minimal.cpp -o minimal\r\n\r\n### Unit testing\r\n\r\nQuantum++ was extensively tested via a suite of unit tests constructed with\r\n[Google Test 1.8.0](https://github.com/google/googletest) (included with the \r\nproject in `./unit_tests/lib/gtest-1.8.0`). The source code of the unit tests \r\nis provided under `./unit_tests/tests`. To build and run the unit tests, I \r\nstrongly recommend to use [CMake](http://www.cmake.org/) version 3.0.0 or \r\nlater. Assuming you do use [CMake](http://www.cmake.org/), switch to the  \r\n`./unit_tests` directory, create a `build` directory inside it, then from the \r\nnewly created `./unit_tests/build` type\r\n\r\n    cmake ..\r\n    make\r\n    \r\nThe commands above build `./unit_tests/build/tests/qpp_testing`, which you \r\nthen may run.\r\n\r\n##### Note\r\n\r\nThe [CMake](http://www.cmake.org/) configuration file \r\n`./unit_tests/CMakeLists.txt` defines the same building options and default \r\nchoices as the main `./CMakeLists.txt` of Quantum++.  Therefore you can use the \r\nsame flags as the ones mentioned at the beginning of this document when \r\ncustomizing the build. You should modify `./unit_tests/CMakeLists.txt` \r\naccordingly in case your [Eigen 3](http://eigen.tuxfamily.org) library or \r\n[MATLAB](http://www.mathworks.com/products/matlab/) include/library files are \r\nin a different location than the one assumed in this document.\r\n\r\n### Additional remarks\r\n\r\n- The C++ compiler must be C++11 compliant.\r\n\r\n- If using [Windows](http://windows.microsoft.com/), I recommend compiling \r\nunder [cygwin](https://www.cygwin.com) via [CMake](http://www.cmake.org/)\r\nand [g++](https://gcc.gnu.org/). See also \r\n<http://stackoverflow.com/questions/28997206/cygwin-support-for-c11-in-g4-9-2>\r\nfor a bug related to lack of support for some C++11 math functions, and\r\nhow to fix it. Quick fix: patch the standard library header file `<cmath>` \r\nusing the provided patch `./cmath_cygwin.patch`.\r\n\r\n- If your compiler does not support [OpenMP](http://openmp.org/) \r\n(as it is the case e.g with [clang++](http://clang.llvm.org/) pre version 3.7), \r\ndisable [OpenMP](http://openmp.org/) in your build, \r\nas otherwise the linker may not find the \r\n[gomp](https://gcc.gnu.org/projects/gomp/) library.\r\n\r\n- If you run the program on [OS X](http://www.apple.com/osx) with \r\n[MATLAB](http://www.mathworks.com/products/matlab/) support, make sure that \r\nthe environment variable `DYLD_LIBRARY_PATH` is set to point to the \r\n[MATLAB](http://www.mathworks.com/products/matlab/) \r\ncompiler library location, see the `run_OSX_MATLAB` script. \r\nOtherwise, you get a runtime error similar to  \r\n\r\n    > dyld: Library not loaded: @rpath/libmat.dylib.\r\n    \r\n   * I recommend running via a script, as otherwise setting the \r\n    `DYLD_LIBRARY_PATH` globally may interfere with \r\n    [macports](https://www.macports.org/)' [CMake](http://www.cmake.org/) \r\n    installation (in case you use [CMake](http://www.cmake.org/) from \r\n    [macports](https://www.macports.org/)). If you use a script, \r\n    then the environment variable is local to the script and \r\n    does not interfere with the rest of the system.\r\n\r\n   * Example of script, assumed to be located in the root directory \r\n    of Quantum++\r\n        \r\n            #!/bin/sh\r\n            \r\n            MATLAB=/Applications/MATLAB_R2016a.app\r\n            export DYLD_LIBRARY_PATH=$DYLD_LIBRARY_PATH:$MATLAB/bin/maci64\r\n            \r\n            ./build/qpp\r\n\r\n- If you build a debug version with [g++](https://gcc.gnu.org/) under \r\n[OS X](http://www.apple.com/osx) and use \r\n[gdb](http://www.gnu.org/software/gdb/) to step inside template functions \r\nyou may want to add `-fno-weak` compiler flag. See \r\n<http://stackoverflow.com/questions/23330641/gnu-gdb-can-not-step-into-template-functions-os-x-mavericks>\r\nfor more details about this problem.\r\n",
  "google": "UA-56739447-2",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}